/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        LinkedList<TreeNode> stack1 = new LinkedList<>();
        LinkedList<Integer> NodeDepth = new LinkedList<>();
        Map<Integer, Integer> rightNode = new HashMap<>();
        stack1.push(root);
        NodeDepth.push(0);
        int maxDepth = -1;
        
        while (!stack1.isEmpty()) {
            TreeNode node = stack1.pop();
            int depth = NodeDepth.pop();
            if (node != null) {
                maxDepth = Math.max(depth, maxDepth);
                
                if (!rightNode.containsKey(depth)) {
                    rightNode.put(depth, node.val);
                }
                
                stack1.push(node.left);
                stack1.push(node.right);
                NodeDepth.push(depth+1);
                NodeDepth.push(depth+1);
            }
        }
        for (int i = 0; i <= maxDepth; i++) {
            result.add(rightNode.get(i));
        }
        return result;
    }
}
