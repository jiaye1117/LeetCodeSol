
/**
 * class Interval {
 *   public int start;
 *   public int end;
 *   public Interval(int start, int end) {
 *     this.start = start;
 *     this.end = end;
 *   }
 * }
 */
class Solution {
  public int length(List<Interval> intervals) {
    // Write your solution here.
    Collections.sort(intervals, new Comparator<Interval>() {
      @Override
      public int compare(Interval a, Interval b) {
        return a.start - b.start;
      }
    });
    LinkedList<Interval> merge = new LinkedList<>();
    
    for (Interval interval : intervals) {
      if (merge.isEmpty() || interval.start > merge.getLast().end) {
        merge.add(interval);
      }else {
        merge.getLast().end = Math.max(merge.getLast().end, interval.end);
      }
    }
    int length = 0;
    for (Interval inter : merge) {
      length += inter.end - inter.start;
    }
    return length;
  }
}
