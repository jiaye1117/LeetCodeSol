public class Solution {
  public boolean match(String input, String pattern) {
    // Write your solution here
    if (input == null && pattern == null) {
      return true;
    }
    if (input == null || pattern == null) {
      return false;
    }
    boolean[][] match = new boolean[input.length()+1][pattern.length()+1];
    match[0][0] = true;
    for (int i = 1; i <= pattern.length(); i ++) {
      if (pattern.charAt(i-1) == '*') {
        match[0][i] = true;
      }else {
        break;
      } 
    } 
    for (int i = 1; i <= input.length(); i ++) {
      for (int j = 1; j <= pattern.length(); j ++) {
        if (pattern.charAt(j - 1) == '*') {
          match[i][j] = match[i-1][j] || match[i][j-1];
        }else {
          if (pattern.charAt(j-1) == '?' || pattern.charAt(j-1) == input.charAt(i-1)) {
            match[i][j] = match[i-1][j-1];
          }
        }
      }
    }
    return match[input.length()][pattern.length()];
  }
}
/**
 * 用一个dp[][]来记录结果。首先我们初始化数组，当s为空时，我们从p的第一个字符开始，如果为’*‘, 当前状态就为true, 如果不为’*‘，则当前状态为false,并且后面的都为false，因为s为空，后面只要有一个字符，就为false；当s不为空，p为空时，这是全为false。接下来我们要找到递推式，当p中的字符为'*'时，它可以代表多个字符也可以代表空字符，当代表空字符时，dp[i][j] = dp[i][j - 1]; 当代表多个字符时 dp[i][j] = dp[i - 1][j]。因此当p的字符为'*'时 dp[i][j] = dp[i][j - 1] || dp[i - 1][j]。当p的字符不为'*'时，我们首先要比较当前两个字符是否相等 ，相等的情况有两种，一个是p的字符为'?', 或者两个是相同的字符；其次我们还要考虑上一个状态，这时的动态转移方程为 
 * dp[i][j] = dp[i - 1][j - 1] && (p.charAt(j - 1) == '?' || p.charAt(j - 1) == s.charAt(i - 1))
 */
