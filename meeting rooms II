public class Solution {
  public int minMeetingRooms(int[][] intervals) {
    // Write your solution here
    if (intervals == null || intervals.length == 0) {
      return 0;
    }
    Arrays.sort(intervals, new Comparator<int[]>() {
      @Override
      public int compare(int[]a, int[]b) {
        return a[0] - b[0];
      }
    });
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    minHeap.offer(intervals[0][1]);
    for (int i = 1; i < intervals.length; i ++) {
      if (intervals[i][0] >= minHeap.peek()) {
        minHeap.poll();
      }  
      minHeap.offer(intervals[i][1]);
    }
    return minHeap.size();
  }
}
